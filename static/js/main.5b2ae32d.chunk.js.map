{"version":3,"sources":["API.ts","utils.ts","Components/QuestionCard.styles.ts","Components/QuestionCard.tsx","images/Music.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b2ae32d.chunk.js","sourcesContent":["import {shuffleArray} from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & {\r\n    answers: string[];\r\n}\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    console.log(data)\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer\r\n            ]),\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) => \r\n[...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: 20px;\r\n    max-width: 1100px;\r\n    width: 800px;\r\n    height: 400px;\r\n    /* background: #000; \r\n    border-radius: 10px;\r\n    border: 2px solid #000;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25); \r\n    */\r\n    padding: 20px;\r\n    \r\n    text-align: center;\r\n\r\n    p {\r\n        color: #fff;\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        filter: brightness(0.8);\r\n        /* opacity: 0.8 */\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        padding: 15px;\r\n        margin: 10px 0;\r\n        background: ${({ correct, userClicked}) => \r\n            correct\r\n            ? 'linear-gradient(90deg, #00ff48, #00ff48)' /* Correct Answer */\r\n            : !correct && userClicked\r\n            ? 'linear-gradient(90deg, #ff3c00, #ff3c00)' /* Incorrect Answer */\r\n            : 'linear-gradient(90deg, #03ffee, #03ffee)' /* All Answers */\r\n        };\r\n        border: ${({ correct, userClicked}) => \r\n            correct\r\n            ? '3px solid #02d13d' /* Correct Answer */\r\n            : !correct && userClicked\r\n            ? '3px solid #c73002' /* Incorrect Answer */\r\n            : '3px solid #02d1c3' /* All Answers */\r\n        };\r\n        border-radius: 10px;\r\n        color: #000;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport {AnswerObject} from '../App';\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string,\r\n    answers: string[],\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void,\r\n    userAnswer: AnswerObject | undefined,\r\n    questionNumber: number,\r\n    totalQuestions: number,\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer, \r\n    questionNumber, \r\n    totalQuestions\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNumber} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n        <div>\r\n            {answers.map(answer => (\r\n                <ButtonWrapper \r\n                key={answer}\r\n                correct={userAnswer?.correctAnswer === answer}\r\n                userClicked={userAnswer?.answer === answer}>\r\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{__html: answer}}></span>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/Music.4b1a42f2.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/Music.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        font-family: 'Montserrat', sans-serif;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > p {\r\n        color: #fff;\r\n    }\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n        font-weight: 600;\r\n    }\r\n    h1 {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-image: linear-gradient(180deg, #00ffa6, #00e1ff);\r\n        font-weight: 400;\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fbff05, #fbff05);\r\n        border: 2px solid #bec200;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`\r\n","import React, {useState} from 'react';\nimport { fetchQuizQuestions } from './API';\n\nimport QuestionCard from './Components/QuestionCard';\n\nimport {QuestionState, Difficulty} from './API';\n\nimport { GlobalStyle, Wrapper } from './App.styles'; \n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    \n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      \n      if (correct) {\n        setScore(prev => prev + 1);\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n      \n    }\n  }\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n  }\n  return (\n    <>\n    <GlobalStyle/>\n    <Wrapper>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n      (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) \n      : \n        null\n      }\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      { loading && <p>Loading Questions...</p> }\n      {!loading && !gameOver && (\n      <QuestionCard\n        questionNumber={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 \n      && number !== TOTAL_QUESTIONS - 1 ? (\n      <button className=\"next\" onClick={nextQuestion}>\n        Next Question\n      </button>)\n      : null\n      }\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>  \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}